matrix = [['X', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
          ['X', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
          ['X', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
          ['X', ' ', ' ', ' ', ' ', ' ', 'X', 'X', 'X'],
          [' ', 'X', ' ', ' ', ' ', ' ', 'X', 'X', 'X'],
          ['X', ' ', ' ', ' ', ' ', ' ', 'X', 'X', 'X'],
          [' ', 'X', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
          ['X', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
          [' ', 'X', ' ', ' ', ' ', ' ', ' ', ' ', ' ']]

def find_neighbors(position, matrix, visited):
    i, j = position
    neighbors = []

    directions = [(1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (1, -1)]

    for di, dj in directions:
        ni, nj = i + di, j + dj
        if 0 <= ni < 9 and 0 <= nj < 9 and matrix[ni][nj] == 'X' and (ni, nj) not in visited:
            neighbors.append((ni, nj))
            visited.add((ni, nj))

    return neighbors, visited

def dfs(start):
    visited = set()
    queue = [start]

    if matrix[start[0]][start[1]] != 'X':
        return False

    while queue:
        current = queue.pop(0)

        if current[0] == 8:
            return True

        visited.add(current)
        neighbors, visited = find_neighbors(current, matrix, visited)
        queue.extend(neighbors)

    return False

print(dfs((0, 0)))
