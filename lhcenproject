matrix=[['X','X','X','X'],['X','X','X','X'],['X','X','X','X'],['X','X','X','X']]
def findNeighbors(position,container,matrix,visited):
    i = position[0]
    j = position[1]
    if (i+1<9 and matrix[i+1][j]=="X" and (i+1,j) not in visited):
        container.append((i+1,j))
        visited.append((i+1,j))
        if (j+1<9 and matrix[i+1][j+1]=="X" and (i+1,j+1) not in visited):
            container.append((i+1,j+1))
            visited.append((i+1,j+1))
        if (-1<j-1 and matrix[i+1][j-1]=="X" and (i+1,j-1) not in visited):
            container.append((i+1,j-1))
            visited.append((i+1,j-1))
        

    if (-1<i-1 and matrix[i-1][j]=="X" and (i-1,j) not in visited):
        container.append((i-1,j))
        visited.append((i-1,j))
        if (j+1<9 and matrix[i-1][j+1]=="X" and (i-1,j+1) not in visited):
            container.append((i-1,j+1))
            visited.append((i-1,j+1))
        if (-1<j-1 and matrix[i-1][j-1]=="X" and (i-1,j-1) not in visited):
            container.append((i-1,j-1))
            visited.append((i-1,j-1))

    if (j+1<9 and matrix[i][j+1]=="X" and (i,j+1) not in visited):
            container.append((i,j+1))
            visited.append((i,j+1))
    if (-1<j-1 and matrix[i][j-1]=="X" and (i,j-1) not in visited):
            container.append((i-1,j-1))
            visited.append((i-1,j-1))
    return (container,visited)
    
def dfs(start):
    visited=[]
    neighbors=[]
    queue=[start]
    while (queue):
        current=queue.pop(0)
        if current[0]==8:
             return True
        visited.append(current)
        queue,visited=findNeighbors(current,queue,matrix,visited)
    return False
print(dfs((0,0)))

